diff -up chromium-20090916svn26392/src/chrome/common/sqlite_utils.cc.no-sqlite-debug chromium-20090916svn26392/src/chrome/common/sqlite_utils.cc
--- chromium-20090916svn26392/src/chrome/common/sqlite_utils.cc.no-sqlite-debug	2009-09-16 20:15:08.000000000 -0400
+++ chromium-20090916svn26392/src/chrome/common/sqlite_utils.cc	2009-09-16 20:16:20.000000000 -0400
@@ -42,14 +42,8 @@ class ReleaseSQLErrorHandler : public Va
  public:
   virtual int HandleError(int error, sqlite3* db) {
     error_ = error;
-    // TOD(cpu): Remove this code once it has a few days of air time.
-    if (error == SQLITE_INTERNAL ||
-        error == SQLITE_NOMEM ||
-        error == SQLITE_CORRUPT ||
-        error == SQLITE_IOERR ||
-        error == SQLITE_CONSTRAINT ||
-        error == SQLITE_NOTADB)
-      CHECK(false) << "sqlite fatal error " << error;
+    // TODO(cpu): need to write to some place so we can trigger
+    // the diagnostic-repair mode.
     return error;
   }
 };
@@ -283,8 +277,7 @@ int SQLStatement::prepare(sqlite3* db, c
   DCHECK(!stmt_);
   int rv = sqlite3_prepare_v2(db, sql, sql_len, &stmt_, NULL);
   if (rv != SQLITE_OK) {
-   SQLErrorHandler* error_handler = GetErrorHandlerFactory()->Make();
-   return error_handler->HandleError(rv, db_handle());
+    DLOG(ERROR) << "SQLStatement.prepare_v2 failed: " << sqlite3_errmsg(db);
   }
   return rv;
 }
